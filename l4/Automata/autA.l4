

process AutA() {

clock clock1, clock0;

state
    loc0,
    loc1 { clock1 <= 4 },
    loc2;
init
    loc0;
trans
   loc0 -> loc1 { guard clock0<=3;  },
   loc0 -> loc2 { guard clock1>=5; assign clock1 = 0;  };
}


# Should be in the prelude
class Automaton
class State

decl at: State -> Boolean

decl b: Boolean

# Should be automatic for a process declaration
decl AutA : Automaton
decl loc0 : State
decl loc1 : State
decl loc2 : State
decl clock0 : Time
decl clock1 : Time


# decl ATrans : State -> Time -> Time -> State -> Time -> Time -> Boolean
# decl DTrans : State -> Time -> Time -> State -> Time -> Time -> Boolean
decl ATransTrace : Integer -> State -> Time -> Time -> State -> Time -> Time -> Boolean
decl DTransTrace : Integer -> State -> Time -> Time -> State -> Time -> Time -> Boolean


# decl P: ((State -> State) -> State) -> Boolean
# decl f: (State) -> Boolean
# decl st : State
# decl cl0: Time
# decl st_0: State
# decl cl0_0: Time

# fact <locsDifferent> loc0 /= loc1

# assert E<> at loc2  && clock0 == 2.0
assert {TA: {valid, config: {loglevel: 0, logic: AUFLIRA}}} E<> (at loc2 && b)
# assert P (( \ st_1: State -> \st_2: State -> (f st_1)) st)


