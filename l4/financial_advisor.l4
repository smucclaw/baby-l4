# Example taken from:
# George Luger: Artificial Intelligence, 6th edition
# Section 2.4: A logic-based financial adivsor

class FinancialStatus
class EarningsStatus
class InvestmentStrategy

# Enumeration of members of FinancialStatus
decl adequate: FinancialStatus
decl inadequate: FinancialStatus

# Enumeration of members of EarningsStatus
decl steady: EarningsStatus
decl unsteady: EarningsStatus

# Enumeration of members of InvestmentStrategy
decl savings: InvestmentStrategy
decl combination: InvestmentStrategy
decl stocks: InvestmentStrategy

decl savings_account: FinancialStatus -> Boolean
decl income: FinancialStatus -> Boolean
decl earnings: Integer -> EarningsStatus -> Boolean

decl investment: InvestmentStrategy -> Boolean

decl minsavings: Integer -> Integer
decl minincome: Integer -> Integer

decl amount_saved: Integer -> Boolean
decl dependents: Integer -> Boolean

decl incomeSol: FinancialStatus
decl incomeSol2: FinancialStatus
decl xSol: Integer
decl ySol: Integer
decl zSol: Integer


## Exhaustiveness and disjointness

fact <financialStatusExhaustive>
for x: FinancialStatus
(x == adequate) || (x == inadequate)

fact <earningStatusExhaustive>
for x: EarningsStatus
(x == steady) || (x == unsteady)

fact <investmentStrategyExhaustive>
for x: InvestmentStrategy
(x == savings) || (x == combination) || (x == stocks)

fact <financialStatusDisj>
adequate /= inadequate

fact <earningStatusDisj>
steady /= unsteady

fact <investmentStrategyDisj>
(savings /= combination) && (savings /= combination) && (combination /= stocks)

## Definitions of functions

fact <minsavingsDef>
for x: Integer
minsavings x == 5000 * x

fact <minincomeDef>
for x: Integer
minincome x == 15000 + 4000 * x

## General rules

# 1
rule <accInad>
if savings_account inadequate
then investment savings 

# 2
rule <accAdIncAd>
if savings_account adequate && income adequate
then investment stocks

# 3
rule <accAdIncInad>
if savings_account adequate && income inadequate
then investment combination

# 4
rule <savingsAd>
for x: Integer, y: Integer
if amount_saved x && dependents y && x > minsavings y
then savings_account adequate

# 5
rule <savingsInad>
for x: Integer, y: Integer
if amount_saved x && dependents y && x <= minsavings y 
then savings_account inadequate

# 6
rule <incomeAd>
for x: Integer, y: Integer
if earnings x steady && dependents y && x > minincome y 
then income adequate

# 7
rule <incomeInadESteady>
for x: Integer, y: Integer
if earnings x steady && dependents y && x <= minincome y
then income inadequate

# 8
rule <incomeInadEUnsteady>
for x: Integer
# for demonstrating cycles: if earnings x unsteady && investment stocks
if earnings x unsteady
then income inadequate

## Derived rules

rule <investmentInversion>
     {derived: {apply: {inversion,
     	       	        apply: {normalize, accInad},
     	       	        apply: {normalize, accAdIncAd},
     	       	        apply: {normalize, accAdIncInad}}}}

rule <savings_accountInversion>
     {derived: {apply: {inversion,
     	       	        apply: {normalize, savingsAd},
     	       	        apply: {normalize, savingsInad}}}}

rule <incomeInversion>
     {derived: {apply: {inversion,
     	       	        apply: {normalize, incomeAd},
     	       	        apply: {normalize, incomeInadESteady},
     	       	        apply: {normalize, incomeInadEUnsteady}}}}

rule <amount_savedInversion> 
     {derived: {apply: {inversion,
     	       	        apply: {normalize, amount_savedF}}}}

rule <earningsInversion> 
     {derived: {apply: {inversion,
     	       	        apply: {normalize, earningsF}}}}

rule <dependentsInversion> 
     {derived: {apply: {inversion,
     	       	        apply: {normalize, dependentsF}}}}

## Facts concerning a specific case

# 9
fact <amount_savedF>
amount_saved(22000)

# 10
fact <earningsF>
earnings 25000 steady

# 11
fact <dependentsF>
dependents 3

assert {SMT: valid}
income inadequate
