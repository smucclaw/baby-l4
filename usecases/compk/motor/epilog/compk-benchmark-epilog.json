{"lambda":"vehicle.car(my_car)\nvehicle.age(my_car,15)\nvehicle.length(my_car,4)\nvehicle.width(my_car,2)\nvehicle.height(my_car,1)\nvehicle.weight(my_car,1000)\nvehicle.registered_uk(my_car)\nvehicle.good_condition(my_car)\nvehicle.serviced_regularly(my_car)\npolicy.start(my_policy,0)\npolicy.end(my_policy,31536000)\npolicy.vehicle(my_policy,my_car)\npolicy.excess(my_policy,50)\npolicy.home(my_policy,croydon)\nlocation.territory(croydon,uk)\nlocation.territory(wembley,uk)\nlocation.territory(london,uk)\nlocation.distance_to(croydon,london,10)\nlocation.distance_to(wembley,london,12)\nbreakdown.vehicle(my_breakdown,my_car)\nbreakdown.reason(my_breakdown,mechanical)\nbreakdown.time(my_breakdown,172800)\nbreakdown.location(my_breakdown,wembley)\nbreakdown.excess_paid(my_breakdown,my_policy)\nbreakdown.expense(my_breakdown,bv)\nexpense.category(bv,breakdown_vehicle)\nexpense.price(bv,quantity(200,gbp))\nbreakdown.unrepairable_on_site(my_breakdown)\nbreakdown.expense(my_breakdown,vr)\nexpense.category(vr,vehicle_recovery)\nexpense.price(vr,quantity(50,gbp))\nbreakdown.expense(my_breakdown,vrm)\nexpense.category(vrm,vehicle_recovery_mileage)\nexpense.quantity(vrm,quantity(25,mile))\nexpense.unit_price(vrm,quantity(5,gbp))\nbreakdown.expense(my_breakdown,pr)\nexpense.category(pr,passenger_recovery)\nexpense.quantity(pr,quantity(5,person))\nexpense.quantity(pr,quantity(25,mile))\nexpense.unit_price(pr,quantity(1,gbp))\nbreakdown.expense(my_breakdown,ff)\nexpense.category(ff,fuel_flush)\nexpense.price(ff,quantity(100,gbp))\n","deltas":{},"gamma":[],"omega":"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Eligibility\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n% TODO: \"must [...] if appropriate, have a current MOT certificate and valid road fund license or tax disc on display.\"\nvehicle.insurable(Vehicle) :-\n  (vehicle.car(Vehicle) | vehicle.motorcycle(Vehicle))\n  & vehicle.age(Vehicle,Years) & evaluate(max(Years,15),15)\n  & vehicle.length(Vehicle,Length) & evaluate(max(Length,5.5),5.5)\n  & vehicle.width(Vehicle,Width) & evaluate(max(Width,2.3),2.3)\n  & vehicle.height(Vehicle,Height) & evaluate(max(Height,3),3)\n  & vehicle.weight(Vehicle,Weight) & evaluate(max(Weight,3500),3500)\n  & vehicle.registered_uk(Vehicle)\n  & ~vehicle.commercial(Vehicle)\n\nvehicle.condition_unacceptable(Vehicle) :-\n  ~vehicle.serviced_regularly(Vehicle) | ~vehicle.good_condition(Vehicle)\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Breakdown coverage\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n% Breakdown covered if not excluded\nbreakdown.covered(Breakdown, Policy) :-\n  evaluate(countofall(Reason, breakdown.excluded(Breakdown, Policy, Reason)), 0)\n\n% Excluded if vehicle not included in policy schedule\nbreakdown.excluded(Breakdown, Policy, vehicle_not_scheduled) :-\n  breakdown.vehicle(Breakdown, Vehicle)\n  & policy.vehicle_not_scheduled(Policy, Vehicle)\n\n% Excluded if vehicle doesn't meet requirements\nbreakdown.excluded(Breakdown, Policy, vehicle_unacceptable) :-\n  breakdown.vehicle(Breakdown,Vehicle) & unacceptable_vehicle(Vehicle)\n\n% Excluded if vehicle is not properly maintained\nbreakdown.excluded(Breakdown, Policy, vehicle_condition) :-\n  breakdown.vehicle(Breakdown,Vehicle)\n  & vehicle.condition_unacceptable(Vehicle)\n\n% Excluded if breakdown not caused by an enumerated reason\nbreakdown.excluded(Breakdown, Policy, unenumerated) :-\n  breakdown.reason(Breakdown,Reason) & not_member(Reason, [mechanical, vandalism, fire, theft, flat_tyre, flat_battery, accident, no_fuel, misfuel, keys_faulty, keys_lost, keys_broken, keys_locked_in])\n\n% Excluded if breakdown happens less than a mile from home\nbreakdown.excluded(Breakdown, Policy, close_to_home) :-\n  breakdown.location(Breakdown,Location) & distance_to(Location,Distance) & evaluate(max(Distance,1),Distance)\n\n% Excluded if breakdown happens outside the UK\nbreakdown.excluded(Breakdown, Policy, outside_uk) :-\n  breakdown.location(Breakdown, Location) & location.outside_uk(Location)\n\n% Excluded if breakdown happens outside policy coverage period\nbreakdown.excluded(Breakdown, Policy, outside_period) :-\n  policy.start(Policy,StartTime) & policy.end(Policy,EndTime)\n  & breakdown.time(Breakdown,Time)\n  & outside_range(Time,StartTime,EndTime)\n\n% Excluded until excess paid\nbreakdown.excluded(Breakdown, Policy, excess_unpaid) :-\n  policy.excess(Policy,Excess)\n  & breakdown.excess_unpaid(Breakdown,Policy)\n\n% Excluded if vehicle modified or used for racing\nbreakdown.excluded(Breakdown, Policy, racing) :-\n  breakdown.vehicle(Breakdown,Vehicle)\n  & vehicle.racing(Vehicle)\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Roadside assistance\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n% Breakdown vehicle will attend and try to fix.\nexpense.covered(Expense, Policy) :-\n  expense.category(Expense, breakdown_vehicle)\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Vehicle recovery\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n% Vehicle will be recovered if it \"cannot be made to safe to drive at the\n% place you have broken down\", after trying for up to one hour.\nexpense.covered(Expense, Policy) :-\n  expense.category(Expense, Category)\n  & member(Category, [vehicle_recovery, vehicle_recovery_mileage])\n  & breakdown.expense(Breakdown, Expense)\n  & (breakdown.on_site_repair_start(Breakdown, StartTime)\n    & one_hour_elapsed(StartTime))\n  % Might be that we don't need an hour to figure out the vehicle is\n  % unrepairable on site.\n  | breakdown.unrepairable_on_site(Breakdown)\n\nexpense.excluded(Expense, Policy, unsuitable_use) :-\n  expense.category(Expense, Category)\n  & member(Category, [vehicle_recovery, lockout_vehicle_recovery, passenger_recovery])\n  & breakdown.expense(Breakdown, Expense)\n  & (breakdown.excess_weight(Breakdown) | breakdown.excess_passengers(Breakdown) | breakdown.unsuitable_ground(Breakdown))\n\n% Vehicle and passengers will be recovered to Authorized Operator's base or\n% home/local repairer if keys are broken or lost.\nexpense.covered(Expense,Policy) :-\n  expense.category(Expense, lockout_vehicle_recovery)\n  & breakdown.expense(Breakdown, Expense)\n  & (breakdown.reason(Breakdown, keys_lost) | breakdown.reason(Breakdown, keys_broken))\n\n% For most breakdowns, recovery is covered to a destination \"of your choice\". In the\n% specific case of key loss or breakage, the only destinations covered are the Authorized\n% Operator's base, your home, or a local repairer.\nexpense.covered(Expense, Policy) :-\n  expense.category(Expense, Category)\n  & member(Category, [lockout_vehicle_recovery, lockout_vehicle_recovery_mileage])\n  & breakdown.expense(Breakdown, Expense)\n  & (breakdown.reason(Breakdown, keys_lost) | breakdown.reason(Breakdown, keys_broken))\n  & expense.destination(Expense, Location)\n  & location.territory(Location, uk)\n  & (location.home(Location) | location.authorized_operator_base(Location) | local_repairer(Location))\n\nexpense.limit(Expense, quantity(7, person), max) :-\n  expense.category(Expense, passenger_recovery)\n\nexpense.limit(Expense, quantity(20, mile), max) :-\n  expense.category(Expense, passenger_recovery)\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Messages to home or work\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\nexpense.covered(Expense,Policy) :-\n  breakdown.expense(Breakdown, Expense)\n  & expense.category(Expense, message)\n  & expense.message(Expense, Message)\n  & message.to(Message, To) & (insuree.home(To) | insuree.work(To))\n  & breakdown.sent_messages(Breakdown, SentMessages)\n  & evaluate(max(length(SentMessages), 1), 1)\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Misfueling specifics\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n% Excluded if more than one prior misfuel\nbreakdown.excluded(Breakdown, Policy, prior_misfuels) :-\n  breakdown.reason(Breakdown, misfuel)\n  & policy.prior_misfuels(Policy, PriorMisfuels)\n  & evaluate(max(length(PriorMisfuels), 1), 1)\n\n% Excluded if breakdown caused by misfuel in first 24 hours of coverage\nbreakdown.excluded(Breakdown, Policy, misfuel_first_24) :-\n  breakdown.reason(Breakdown,misfuel)\n  & policy.start(Policy,StartTime)\n  & breakdown.time(Breakdown,Time)\n  & evaluate(min(Time,plus(StartTime,times(60,60,24))),Time)\n\nexpense.covered(Expense, Policy) :-\n  breakdown.expense(Breakdown, Expense) & breakdown.reason(Breakdown, misfuel)\n  & expense.category(Expense, Category)\n  & member(Category, [fuel_flush, refuel])\n\nbreakdown.limit(Breakdown, Policy, quantity(250, gbp), max) :-\n  breakdown.reason(Breakdown, misfuel)\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% General conditions\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n% General exclusions: Dangerous situations, nuclear, war\n\nbreakdown.excluded(Breakdown, Policy, dangerous) :-\n  breakdown.repair_dangerous(Breakdown)\n\nbreakdown.excluded(Breakdown, Policy, nuclear) :-\n  breakdown.nuclear_contributed(Breakdown)\n\nbreakdown.excluded(Breakdown, Policy, war) :-\n  breakdown.war_contributed(Breakdown)\n\n% 100 GBP limit if disagreement with agent's decision on suitable help\nbreakdown.limit(Breakdown, Policy, quantity(100, gbp), max) :-\n  breakdown.advice_refused(Breakdown)\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Limits\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\nlimited_expense_payout(Expense, Policy, Payout) :-\n  evaluate(countofall(Quantity, expense.quantity(Expense, Quantity)), 0)\n  & expense.price(Expense, Payout)\n\nlimited_expense_payout(Expense, Policy, quantity(LimitedPayoutAmount, PayoutUnit)) :-\n  evaluate(\n    setofall(Quantity, expense.quantity(Expense, Quantity)),\n    Quantities)\n  & limit_quantities(Quantities, Expense, LimitedQuantities)\n  & multiply_quantities(LimitedQuantities, quantity(TotalAmount, TotalUnit))\n  % TODO Check that units match up here\n  & expense.unit_price(Expense, quantity(PriceAmount, PayoutUnit))\n  & evaluate(times(TotalAmount, PriceAmount), LimitedPayoutAmount)\n\nlimit_quantities([], Expense, [])\nlimit_quantities(Quantity!Tail, Expense, Limited) :-\n  limit_quantity(Quantity, Expense, LimitedQuantity)\n  & limit_quantities(Tail, Expense, LimitedTail)\n  & same(LimitedQuantity!LimitedTail, Limited)\n\nlimit_quantity(quantity(Amount, Unit), Expense, Limited) :-\n  % There should only be one limit with a matching unit. Should check for\n  % contrary case, indicate problem\n  expense.limit(Expense, quantity(LimitAmount, Unit), max)\n  & evaluate(min(Amount, LimitAmount), LimitedAmount)\n  & same(Limited, quantity(LimitedAmount, Unit))\n\nlimit_quantity(quantity(Amount, Unit), Expense, Limited) :-\n  evaluate(countofall(Limit, expense.limit(Expense, quantity(LimitAmount, Unit), LimitType)), 0)\n  & same(Limited, quantity(Amount, Unit))\n\nmultiply_quantities([quantity(Amount, Unit)], quantity(Amount, Unit))\nmultiply_quantities(quantity(Amount, Unit)!Tail, quantity(MultipliedAmount, MultipliedUnit)) :-\n  multiply_quantities(Tail, quantity(TailAmount, TailUnit))\n  & evaluate(times(Amount, TailAmount), MultipliedAmount)\n  & multiply_units(Unit, TailUnit, MultipliedUnit)\n\nmultiply_units(Unit1, Unit2, multunit(Unit1, Unit2))\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Claims\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\nexpenses_payout(Policy, Breakdown, Payout) :-\n  evaluate(\n    setofall(Expense,\n      breakdown.expense(Breakdown, Expense)\n      & expense.coverage(Expense, Policy, covered)),\n    EligibleExpenses)\n  & sum_expenses(EligibleExpenses, Policy, Payout)\n  \npayout(Policy, Breakdown, Payout) :-\n  breakdown.coverage(Breakdown, Policy, covered)\n  & evaluate(countofall(Limit, breakdown.limit(Breakdown, Policy, Quantity, LimitType)), 0)\n  & expenses_payout(Policy, Breakdown, Payout)\n\npayout(Policy, Breakdown, quantity(PayoutAmount, gbp)) :-\n  breakdown.coverage(Breakdown, Policy, covered)\n  & breakdown.limit(Breakdown, Policy, quantity(PayoutAmountMax, gbp), max)\n  & expenses_payout(Policy, Breakdown, quantity(ExpensesPayoutAmount, gbp))\n  & evaluate(min(ExpensesPayoutAmount, PayoutAmountMax), PayoutAmount)\n\n% What if we aren't using GBP?\nsum_expenses([], Policy, quantity(0, gbp))\nsum_expenses(Expense!Tail, Policy, quantity(TotalAmount, gbp)) :-\n  limited_expense_payout(Expense, Policy, quantity(PayoutAmount, gbp))\n  & sum_expenses(Tail, Policy, quantity(TailAmount, gbp))\n  & evaluate(plus(PayoutAmount, TailAmount), TotalAmount)\n\nbreakdown.coverage(Breakdown,Policy,covered) :-\n  breakdown.covered(Breakdown, Policy)\n  & evaluate(countofall(B, breakdown.excluded(Breakdown, Policy, X)),0)\n\nbreakdown.coverage(Breakdown, Policy, excluded) :-\n  breakdown.excluded(Breakdown, Policy, X)\n\nexpense.coverage(Expense,Policy,covered) :-\n  expense.covered(Expense, Policy)\n  & evaluate(countofall(E, expense.excluded(Expense, Policy, X)), 0)\n\nexpense.coverage(Expense, Policy, excluded) :-\n  expense.excluded(Expense, Policy, X)\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Utilities\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\npolicy.vehicle_not_scheduled(Policy, Vehicle) :- ~policy.vehicle(Policy, Vehicle)\n\nlocation.outside_uk(Location) :- ~location.territory(Location,uk)\n\nbreakdown.excess_unpaid(Breakdown,Policy) :- ~breakdown.excess_paid(Breakdown,Policy)\n\none_hour_elapsed(StartTime) :-\n  current_time(CurrentTime)\n  & evaluate(min(minus(CurrentTime,StartTime), 3600), 3600)\n\nin_range(X, Start, End) :-\n  evaluate(min(X, Start), Start)\n  & evaluate(max(X, End), End)\n\noutside_range(X, Start, End) :- ~in_range(X, Start, End)\n\nmember(X, Head!Tail) :- same(X, Head) | member(X, Tail)\n\nnot_member(X, List) :- ~member(X, List)","framelimit":100000,"expanddepth":100,"automatic":false,"ticker":false,"alpha":"<div id=\"_main\" style=\"margin-top: 24px; position: absolute; top: 0px; bottom: 10px; width: 100%; left: 0px; right: 0px; overflow: auto;\">\n<div type=\"lambda\" style=\"z-index: 5; transform: translate(820px, 7px); box-shadow: none;\" onclick=\"windowclick(this)\" class=\"text-container drag-element\" data-x=\"820\" data-y=\"7\"><div class=\"handle operation\">Lambda<b style=\"cursor: pointer; position: absolute; right: 3px; top: 1px; font-size: 18px; line-height: 18px;\" onclick=\"removewindow(mywindow(this))\">×</b></div><table style=\"width: 100%; border-style: solid; border-width: 0px 1px; border-color: darkgray;\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"padding: 0px 2px 5px;\" valign=\"center\" height=\"30\" align=\"center\"><input type=\"button\" value=\"Save\" onclick=\"lambdasave(mywindow(this))\" disabled=\"true\"><input type=\"button\" value=\"Revert\" onclick=\"lambdaback(mywindow(this))\" disabled=\"true\"><input type=\"button\" value=\"Sort\" onclick=\"lambdasort(mywindow(this))\"></td></tr></tbody></table><textarea oninput=\"lambdaopen(mywindow(this))\" spellcheck=\"false\" style=\"width: 477px; height: 502px;\">vehicle.car(my_car)\nvehicle.age(my_car,15)\nvehicle.length(my_car,4)\nvehicle.width(my_car,2)\nvehicle.height(my_car,1)\nvehicle.weight(my_car,1000)\nvehicle.registered_uk(my_car)\nvehicle.good_condition(my_car)\nvehicle.serviced_regularly(my_car)\npolicy.start(my_policy,0)\npolicy.end(my_policy,31536000)\npolicy.vehicle(my_policy,my_car)\npolicy.excess(my_policy,50)\npolicy.home(my_policy,croydon)\nlocation.territory(croydon,uk)\nlocation.territory(wembley,uk)\nlocation.territory(london,uk)\nlocation.distance_to(croydon,london,10)\nlocation.distance_to(wembley,london,12)\nbreakdown.vehicle(my_breakdown,my_car)\nbreakdown.reason(my_breakdown,mechanical)\nbreakdown.time(my_breakdown,172800)\nbreakdown.location(my_breakdown,wembley)\nbreakdown.excess_paid(my_breakdown,my_policy)\nbreakdown.expense(my_breakdown,bv)\nexpense.category(bv,breakdown_vehicle)\nexpense.price(bv,quantity(200,gbp))\nbreakdown.unrepairable_on_site(my_breakdown)\nbreakdown.expense(my_breakdown,vr)\nexpense.category(vr,vehicle_recovery)\nexpense.price(vr,quantity(50,gbp))\nbreakdown.expense(my_breakdown,vrm)\nexpense.category(vrm,vehicle_recovery_mileage)\nexpense.quantity(vrm,quantity(25,mile))\nexpense.unit_price(vrm,quantity(5,gbp))\nbreakdown.expense(my_breakdown,pr)\nexpense.category(pr,passenger_recovery)\nexpense.quantity(pr,quantity(5,person))\nexpense.quantity(pr,quantity(25,mile))\nexpense.unit_price(pr,quantity(1,gbp))\nbreakdown.expense(my_breakdown,ff)\nexpense.category(ff,fuel_flush)\nexpense.price(ff,quantity(100,gbp))\n</textarea></div><div type=\"library\" style=\"z-index: 4; transform: translate(5px, 5px); box-shadow: none;\" onclick=\"windowclick(this)\" class=\"text-container drag-element active\" data-x=\"5\" data-y=\"5\"><div class=\"handle operation\">Library<b style=\"cursor: pointer; position: absolute; right: 3px; top: 1px; font-size: 18px; line-height: 18px;\" onclick=\"removewindow(mywindow(this))\">×</b></div><table style=\"width: 100%; border-style: solid; border-width: 0px 1px; border-color: darkgray;\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"padding: 0px 2px 5px;\" valign=\"center\" height=\"30\" align=\"center\"><input type=\"button\" value=\"Save\" onclick=\"librarysave(mywindow(this))\" disabled=\"true\"><input type=\"button\" value=\"Revert\" onclick=\"libraryrevert(mywindow(this))\" disabled=\"true\"></td></tr></tbody></table><textarea oninput=\"libraryopen(mywindow(this))\" spellcheck=\"false\" style=\"width: 804px; height: 839px;\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Eligibility\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n% TODO: \"must [...] if appropriate, have a current MOT certificate and valid road fund license or tax disc on display.\"\nvehicle.insurable(Vehicle) :-\n  (vehicle.car(Vehicle) | vehicle.motorcycle(Vehicle))\n  &amp; vehicle.age(Vehicle,Years) &amp; evaluate(max(Years,15),15)\n  &amp; vehicle.length(Vehicle,Length) &amp; evaluate(max(Length,5.5),5.5)\n  &amp; vehicle.width(Vehicle,Width) &amp; evaluate(max(Width,2.3),2.3)\n  &amp; vehicle.height(Vehicle,Height) &amp; evaluate(max(Height,3),3)\n  &amp; vehicle.weight(Vehicle,Weight) &amp; evaluate(max(Weight,3500),3500)\n  &amp; vehicle.registered_uk(Vehicle)\n  &amp; ~vehicle.commercial(Vehicle)\n\nvehicle.condition_unacceptable(Vehicle) :-\n  ~vehicle.serviced_regularly(Vehicle) | ~vehicle.good_condition(Vehicle)\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Breakdown coverage\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n% Breakdown covered if not excluded\nbreakdown.covered(Breakdown, Policy) :-\n  evaluate(countofall(Reason, breakdown.excluded(Breakdown, Policy, Reason)), 0)\n\n% Excluded if vehicle not included in policy schedule\nbreakdown.excluded(Breakdown, Policy, vehicle_not_scheduled) :-\n  breakdown.vehicle(Breakdown, Vehicle)\n  &amp; policy.vehicle_not_scheduled(Policy, Vehicle)\n\n% Excluded if vehicle doesn't meet requirements\nbreakdown.excluded(Breakdown, Policy, vehicle_unacceptable) :-\n  breakdown.vehicle(Breakdown,Vehicle) &amp; unacceptable_vehicle(Vehicle)\n\n% Excluded if vehicle is not properly maintained\nbreakdown.excluded(Breakdown, Policy, vehicle_condition) :-\n  breakdown.vehicle(Breakdown,Vehicle)\n  &amp; vehicle.condition_unacceptable(Vehicle)\n\n% Excluded if breakdown not caused by an enumerated reason\nbreakdown.excluded(Breakdown, Policy, unenumerated) :-\n  breakdown.reason(Breakdown,Reason) &amp; not_member(Reason, [mechanical, vandalism, fire, theft, flat_tyre, flat_battery, accident, no_fuel, misfuel, keys_faulty, keys_lost, keys_broken, keys_locked_in])\n\n% Excluded if breakdown happens less than a mile from home\nbreakdown.excluded(Breakdown, Policy, close_to_home) :-\n  breakdown.location(Breakdown,Location) &amp; distance_to(Location,Distance) &amp; evaluate(max(Distance,1),Distance)\n\n% Excluded if breakdown happens outside the UK\nbreakdown.excluded(Breakdown, Policy, outside_uk) :-\n  breakdown.location(Breakdown, Location) &amp; location.outside_uk(Location)\n\n% Excluded if breakdown happens outside policy coverage period\nbreakdown.excluded(Breakdown, Policy, outside_period) :-\n  policy.start(Policy,StartTime) &amp; policy.end(Policy,EndTime)\n  &amp; breakdown.time(Breakdown,Time)\n  &amp; outside_range(Time,StartTime,EndTime)\n\n% Excluded until excess paid\nbreakdown.excluded(Breakdown, Policy, excess_unpaid) :-\n  policy.excess(Policy,Excess)\n  &amp; breakdown.excess_unpaid(Breakdown,Policy)\n\n% Excluded if vehicle modified or used for racing\nbreakdown.excluded(Breakdown, Policy, racing) :-\n  breakdown.vehicle(Breakdown,Vehicle)\n  &amp; vehicle.racing(Vehicle)\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Roadside assistance\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n% Breakdown vehicle will attend and try to fix.\nexpense.covered(Expense, Policy) :-\n  expense.category(Expense, breakdown_vehicle)\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Vehicle recovery\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n% Vehicle will be recovered if it \"cannot be made to safe to drive at the\n% place you have broken down\", after trying for up to one hour.\nexpense.covered(Expense, Policy) :-\n  expense.category(Expense, Category)\n  &amp; member(Category, [vehicle_recovery, vehicle_recovery_mileage])\n  &amp; breakdown.expense(Breakdown, Expense)\n  &amp; (breakdown.on_site_repair_start(Breakdown, StartTime)\n    &amp; one_hour_elapsed(StartTime))\n  % Might be that we don't need an hour to figure out the vehicle is\n  % unrepairable on site.\n  | breakdown.unrepairable_on_site(Breakdown)\n\nexpense.excluded(Expense, Policy, unsuitable_use) :-\n  expense.category(Expense, Category)\n  &amp; member(Category, [vehicle_recovery, lockout_vehicle_recovery, passenger_recovery])\n  &amp; breakdown.expense(Breakdown, Expense)\n  &amp; (breakdown.excess_weight(Breakdown) | breakdown.excess_passengers(Breakdown) | breakdown.unsuitable_ground(Breakdown))\n\n% Vehicle and passengers will be recovered to Authorized Operator's base or\n% home/local repairer if keys are broken or lost.\nexpense.covered(Expense,Policy) :-\n  expense.category(Expense, lockout_vehicle_recovery)\n  &amp; breakdown.expense(Breakdown, Expense)\n  &amp; (breakdown.reason(Breakdown, keys_lost) | breakdown.reason(Breakdown, keys_broken))\n\n% For most breakdowns, recovery is covered to a destination \"of your choice\". In the\n% specific case of key loss or breakage, the only destinations covered are the Authorized\n% Operator's base, your home, or a local repairer.\nexpense.covered(Expense, Policy) :-\n  expense.category(Expense, Category)\n  &amp; member(Category, [lockout_vehicle_recovery, lockout_vehicle_recovery_mileage])\n  &amp; breakdown.expense(Breakdown, Expense)\n  &amp; (breakdown.reason(Breakdown, keys_lost) | breakdown.reason(Breakdown, keys_broken))\n  &amp; expense.destination(Expense, Location)\n  &amp; location.territory(Location, uk)\n  &amp; (location.home(Location) | location.authorized_operator_base(Location) | local_repairer(Location))\n\nexpense.limit(Expense, quantity(7, person), max) :-\n  expense.category(Expense, passenger_recovery)\n\nexpense.limit(Expense, quantity(20, mile), max) :-\n  expense.category(Expense, passenger_recovery)\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Messages to home or work\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\nexpense.covered(Expense,Policy) :-\n  breakdown.expense(Breakdown, Expense)\n  &amp; expense.category(Expense, message)\n  &amp; expense.message(Expense, Message)\n  &amp; message.to(Message, To) &amp; (insuree.home(To) | insuree.work(To))\n  &amp; breakdown.sent_messages(Breakdown, SentMessages)\n  &amp; evaluate(max(length(SentMessages), 1), 1)\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Misfueling specifics\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n% Excluded if more than one prior misfuel\nbreakdown.excluded(Breakdown, Policy, prior_misfuels) :-\n  breakdown.reason(Breakdown, misfuel)\n  &amp; policy.prior_misfuels(Policy, PriorMisfuels)\n  &amp; evaluate(max(length(PriorMisfuels), 1), 1)\n\n% Excluded if breakdown caused by misfuel in first 24 hours of coverage\nbreakdown.excluded(Breakdown, Policy, misfuel_first_24) :-\n  breakdown.reason(Breakdown,misfuel)\n  &amp; policy.start(Policy,StartTime)\n  &amp; breakdown.time(Breakdown,Time)\n  &amp; evaluate(min(Time,plus(StartTime,times(60,60,24))),Time)\n\nexpense.covered(Expense, Policy) :-\n  breakdown.expense(Breakdown, Expense) &amp; breakdown.reason(Breakdown, misfuel)\n  &amp; expense.category(Expense, Category)\n  &amp; member(Category, [fuel_flush, refuel])\n\nbreakdown.limit(Breakdown, Policy, quantity(250, gbp), max) :-\n  breakdown.reason(Breakdown, misfuel)\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% General conditions\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n% General exclusions: Dangerous situations, nuclear, war\n\nbreakdown.excluded(Breakdown, Policy, dangerous) :-\n  breakdown.repair_dangerous(Breakdown)\n\nbreakdown.excluded(Breakdown, Policy, nuclear) :-\n  breakdown.nuclear_contributed(Breakdown)\n\nbreakdown.excluded(Breakdown, Policy, war) :-\n  breakdown.war_contributed(Breakdown)\n\n% 100 GBP limit if disagreement with agent's decision on suitable help\nbreakdown.limit(Breakdown, Policy, quantity(100, gbp), max) :-\n  breakdown.advice_refused(Breakdown)\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Limits\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\nlimited_expense_payout(Expense, Policy, Payout) :-\n  evaluate(countofall(Quantity, expense.quantity(Expense, Quantity)), 0)\n  &amp; expense.price(Expense, Payout)\n\nlimited_expense_payout(Expense, Policy, quantity(LimitedPayoutAmount, PayoutUnit)) :-\n  evaluate(\n    setofall(Quantity, expense.quantity(Expense, Quantity)),\n    Quantities)\n  &amp; limit_quantities(Quantities, Expense, LimitedQuantities)\n  &amp; multiply_quantities(LimitedQuantities, quantity(TotalAmount, TotalUnit))\n  % TODO Check that units match up here\n  &amp; expense.unit_price(Expense, quantity(PriceAmount, PayoutUnit))\n  &amp; evaluate(times(TotalAmount, PriceAmount), LimitedPayoutAmount)\n\nlimit_quantities([], Expense, [])\nlimit_quantities(Quantity!Tail, Expense, Limited) :-\n  limit_quantity(Quantity, Expense, LimitedQuantity)\n  &amp; limit_quantities(Tail, Expense, LimitedTail)\n  &amp; same(LimitedQuantity!LimitedTail, Limited)\n\nlimit_quantity(quantity(Amount, Unit), Expense, Limited) :-\n  % There should only be one limit with a matching unit. Should check for\n  % contrary case, indicate problem\n  expense.limit(Expense, quantity(LimitAmount, Unit), max)\n  &amp; evaluate(min(Amount, LimitAmount), LimitedAmount)\n  &amp; same(Limited, quantity(LimitedAmount, Unit))\n\nlimit_quantity(quantity(Amount, Unit), Expense, Limited) :-\n  evaluate(countofall(Limit, expense.limit(Expense, quantity(LimitAmount, Unit), LimitType)), 0)\n  &amp; same(Limited, quantity(Amount, Unit))\n\nmultiply_quantities([quantity(Amount, Unit)], quantity(Amount, Unit))\nmultiply_quantities(quantity(Amount, Unit)!Tail, quantity(MultipliedAmount, MultipliedUnit)) :-\n  multiply_quantities(Tail, quantity(TailAmount, TailUnit))\n  &amp; evaluate(times(Amount, TailAmount), MultipliedAmount)\n  &amp; multiply_units(Unit, TailUnit, MultipliedUnit)\n\nmultiply_units(Unit1, Unit2, multunit(Unit1, Unit2))\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Claims\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\nexpenses_payout(Policy, Breakdown, Payout) :-\n  evaluate(\n    setofall(Expense,\n      breakdown.expense(Breakdown, Expense)\n      &amp; expense.coverage(Expense, Policy, covered)),\n    EligibleExpenses)\n  &amp; sum_expenses(EligibleExpenses, Policy, Payout)\n  \npayout(Policy, Breakdown, Payout) :-\n  breakdown.coverage(Breakdown, Policy, covered)\n  &amp; evaluate(countofall(Limit, breakdown.limit(Breakdown, Policy, Quantity, LimitType)), 0)\n  &amp; expenses_payout(Policy, Breakdown, Payout)\n\npayout(Policy, Breakdown, quantity(PayoutAmount, gbp)) :-\n  breakdown.coverage(Breakdown, Policy, covered)\n  &amp; breakdown.limit(Breakdown, Policy, quantity(PayoutAmountMax, gbp), max)\n  &amp; expenses_payout(Policy, Breakdown, quantity(ExpensesPayoutAmount, gbp))\n  &amp; evaluate(min(ExpensesPayoutAmount, PayoutAmountMax), PayoutAmount)\n\n% What if we aren't using GBP?\nsum_expenses([], Policy, quantity(0, gbp))\nsum_expenses(Expense!Tail, Policy, quantity(TotalAmount, gbp)) :-\n  limited_expense_payout(Expense, Policy, quantity(PayoutAmount, gbp))\n  &amp; sum_expenses(Tail, Policy, quantity(TailAmount, gbp))\n  &amp; evaluate(plus(PayoutAmount, TailAmount), TotalAmount)\n\nbreakdown.coverage(Breakdown,Policy,covered) :-\n  breakdown.covered(Breakdown, Policy)\n  &amp; evaluate(countofall(B, breakdown.excluded(Breakdown, Policy, X)),0)\n\nbreakdown.coverage(Breakdown, Policy, excluded) :-\n  breakdown.excluded(Breakdown, Policy, X)\n\nexpense.coverage(Expense,Policy,covered) :-\n  expense.covered(Expense, Policy)\n  &amp; evaluate(countofall(E, expense.excluded(Expense, Policy, X)), 0)\n\nexpense.coverage(Expense, Policy, excluded) :-\n  expense.excluded(Expense, Policy, X)\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Utilities\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\npolicy.vehicle_not_scheduled(Policy, Vehicle) :- ~policy.vehicle(Policy, Vehicle)\n\nlocation.outside_uk(Location) :- ~location.territory(Location,uk)\n\nbreakdown.excess_unpaid(Breakdown,Policy) :- ~breakdown.excess_paid(Breakdown,Policy)\n\none_hour_elapsed(StartTime) :-\n  current_time(CurrentTime)\n  &amp; evaluate(min(minus(CurrentTime,StartTime), 3600), 3600)\n\nin_range(X, Start, End) :-\n  evaluate(min(X, Start), Start)\n  &amp; evaluate(max(X, End), End)\n\noutside_range(X, Start, End) :- ~in_range(X, Start, End)\n\nmember(X, Head!Tail) :- same(X, Head) | member(X, Tail)\n\nnot_member(X, List) :- ~member(X, List)</textarea></div><div type=\"compute\" style=\"z-index: 275; transform: translate(1326px, 3px);\" onclick=\"windowclick(this)\" class=\"text-container drag-element\" data-x=\"1326\" data-y=\"3\" autorefresh=\"true\"><div class=\"handle operation\">Compute<b style=\"cursor: pointer; position: absolute; right: 3px; top: 1px; font-size: 18px; line-height: 18px;\" onclick=\"removewindow(mywindow(this))\">×</b></div><table style=\"width: 100%; border-style: solid; border-width: 0px 1px; border-color: darkgray;\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"width: 40px; padding: 0px 2px;\">Query</td><td><input type=\"text\" style=\"font-family: Courier;\" oninput=\"computerefresh(mywindow(this))\" data-com.bitwarden.browser.user-edited=\"yes\" value=\"breakdown.limit(my_breakdown, my_policy, Limit, LimitType)\"></td></tr><tr><td colspan=\"2\" style=\"padding: 0px 2px 5px;\" align=\"center\"><input type=\"button\" value=\"Show\" onclick=\"computeshow(mywindow(this))\" disabled=\"true\"><input type=\"button\" value=\"Next\" onclick=\"computenext(mywindow(this))\" disabled=\"true\"><input type=\"text\" onchange=\"computerefresh(mywindow(this))\" class=\"result\" placeholder=\"100\" style=\"width:30px; border-color:black; border-style:solid; border-width:0px 0px 0px 0px; background:white;\" value=\"100\">result(s) <input type=\"checkbox\" onclick=\"computeautomatic(mywindow(this))\" data-com.bitwarden.browser.user-edited=\"yes\" checked=\"true\">Autorefresh<hr style=\"margin-bottom:0px\"><input type=\"text\" class=\"result\" style=\"width:240px; border-color:black;border-style:solid; border-width:0px 0px 0px 0px; background:#e5f1ff; text-align:center\" value=\"2 unification(s)\" disabled=\"\"></td></tr></tbody></table><textarea readonly=\"true\" class=\"clear\" spellcheck=\"false\" style=\"width: 584px; height: 79px;\"></textarea></div><div type=\"compute\" style=\"z-index: 3; transform: translate(1327px, 332px);\" onclick=\"windowclick(this)\" class=\"text-container drag-element\" data-x=\"1327\" data-y=\"332\" autorefresh=\"true\"><div class=\"handle operation\">Compute<b style=\"cursor: pointer; position: absolute; right: 3px; top: 1px; font-size: 18px; line-height: 18px;\" onclick=\"removewindow(mywindow(this))\">×</b></div><table style=\"width: 100%; border-style: solid; border-width: 0px 1px; border-color: darkgray;\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"width: 40px; padding: 0px 2px;\">Query</td><td><input type=\"text\" style=\"font-family: Courier;\" oninput=\"computerefresh(mywindow(this))\" data-com.bitwarden.browser.user-edited=\"yes\" value=\"payout(my_policy, my_breakdown, Payout)\"></td></tr><tr><td colspan=\"2\" style=\"padding: 0px 2px 5px;\" align=\"center\"><input type=\"button\" value=\"Show\" onclick=\"computeshow(mywindow(this))\" disabled=\"true\"><input type=\"button\" value=\"Next\" onclick=\"computenext(mywindow(this))\" disabled=\"true\"><input type=\"text\" onchange=\"computerefresh(mywindow(this))\" class=\"result\" placeholder=\"100\" style=\"width:30px; border-color:black; border-style:solid; border-width:0px 0px 0px 0px; background:white;\" value=\"100\">result(s) <input type=\"checkbox\" onclick=\"computeautomatic(mywindow(this))\" data-com.bitwarden.browser.user-edited=\"yes\" checked=\"true\">Autorefresh<hr style=\"margin-bottom:0px\"><input type=\"text\" class=\"result\" style=\"width:240px; border-color:black;border-style:solid; border-width:0px 0px 0px 0px; background:#e5f1ff; text-align:center\" value=\"456 unification(s)\" disabled=\"\"></td></tr></tbody></table><textarea readonly=\"true\" class=\"clear\" spellcheck=\"false\" style=\"width: 584px; height: 117px;\">payout(my_policy,my_breakdown,quantity(575,gbp))\n</textarea></div><div type=\"trace\" style=\"z-index: 277; transform: translate(823px, 570px);\" onclick=\"windowclick(this)\" class=\"text-container drag-element\" data-x=\"823\" data-y=\"570\"><div class=\"handle operation\">Trace<b style=\"cursor: pointer; position: absolute; right: 3px; top: 1px; font-size: 18px; line-height: 18px;\" onclick=\"removewindow(mywindow(this))\">×</b></div><table style=\"width: 100%; border-style: solid; border-width: 0px 1px; border-color: darkgray;\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"width: 40px; padding: 0px 2px;\">Query</td><td><input type=\"text\" style=\"font-family: Courier;\" oninput=\"tracerefresh(mywindow(this))\" data-com.bitwarden.browser.user-edited=\"yes\" value=\"payout(my_policy, my_breakdown, Payout)\"></td></tr><tr><td colspan=\"2\" style=\"padding: 0px 2px 5px;\" align=\"center\"><input type=\"button\" value=\"Show\" onclick=\"traceshow(mywindow(this))\"><input type=\"text\" onchange=\"tracerefresh(mywindow(this))\" class=\"result\" placeholder=\"100\" style=\"width: 30px; border-color: black; border-style: solid; border-width: 0px 0px 0px 0px; background: white;\" value=\"1\">result(s)</td></tr></tbody></table><textarea readonly=\"true\" class=\"clear\" spellcheck=\"false\" style=\"width: 495px; height: 239px;\">Call: payout(my_policy,my_breakdown,Payout)\n| Call: breakdown.covered(my_breakdown,my_policy)\n| | Call: evaluate(countofall(V575,breakdown.excluded(my_breakdown,my_policy,V575)),0)\n| | Exit: evaluate(countofall(V577,breakdown.excluded(my_breakdown,my_policy,V577)),0)\n| Exit: breakdown.covered(Breakdown,Policy)\n| Call: evaluate(countofall(V578,breakdown.limit(my_breakdown,my_policy,V579,V580)),0)\n| Fail: evaluate(countofall(V578,breakdown.limit(my_breakdown,my_policy,V579,V580)),0)\n| Redo: breakdown.covered(Breakdown,Policy)\n| Fail: breakdown.covered(my_breakdown,my_policy)\n| Call: breakdown.covered(my_breakdown,my_policy)\n| | Call: evaluate(countofall(V584,breakdown.excluded(my_breakdown,my_policy,V584)),0)\n| | Exit: evaluate(countofall(V586,breakdown.excluded(my_breakdown,my_policy,V586)),0)\n| Exit: breakdown.covered(Breakdown,Policy)\n| Call: breakdown.limit(my_breakdown,my_policy,quantity(V587,gbp),max)\n| | Call: breakdown.reason(my_breakdown,misfuel)\n| | Exit: breakdown.reason(my_breakdown,misfuel)\n| Exit: breakdown.limit(Breakdown,Policy,quantity(PayoutAmountMax,gbp),max)\n| Call: expenses_payout(my_policy,my_breakdown,V588)\n| | Call: evaluate(setofall(V589,breakdown.expense(my_breakdown,V589) &amp; expense.coverage(V589,my_policy,covered)),V590)\n| | Exit: evaluate(setofall(V592,breakdown.expense(my_breakdown,V592) &amp; expense.coverage(V592,my_policy,covered)),[bv,vr,vrm,pr,ff])\n| | Call: sum_expenses([bv,vr,vrm,pr,ff],my_policy,V588)\n| | | Call: limited_expense_payout(bv,my_policy,quantity(V593,gbp))\n| | | | Call: evaluate(countofall(V594,expense.quantity(bv,V594)),0)\n| | | | Exit: evaluate(countofall(V596,expense.quantity(bv,V596)),0)\n| | | | Call: expense.price(bv,quantity(V593,gbp))\n| | | | Exit: expense.price(bv,quantity(200,gbp))\n| | | Exit: limited_expense_payout(Expense,Policy,quantity(PayoutAmount,gbp))\n| | | Call: sum_expenses([vr,vrm,pr,ff],my_policy,quantity(V597,gbp))\n| | | | Call: limited_expense_payout(vr,my_policy,quantity(V598,gbp))\n| | | | | Call: evaluate(countofall(V599,expense.quantity(vr,V599)),0)\n| | | | | Exit: evaluate(countofall(V601,expense.quantity(vr,V601)),0)\n| | | | | Call: expense.price(vr,quantity(V598,gbp))\n| | | | | Exit: expense.price(vr,quantity(50,gbp))\n| | | | Exit: limited_expense_payout(Expense,Policy,quantity(PayoutAmount,gbp))\n| | | | Call: sum_expenses([vrm,pr,ff],my_policy,quantity(V602,gbp))\n| | | | | Call: limited_expense_payout(vrm,my_policy,quantity(V603,gbp))\n| | | | | | Call: evaluate(countofall(V604,expense.quantity(vrm,V604)),0)\n| | | | | | Fail: evaluate(countofall(V604,expense.quantity(vrm,V604)),0)\n| | | | | | Call: evaluate(setofall(V606,expense.quantity(vrm,V606)),V607)\n| | | | | | Exit: evaluate(setofall(V609,expense.quantity(vrm,V609)),[quantity(25,mile)])\n| | | | | | Call: limit_quantities([quantity(25,mile)],vrm,V610)\n| | | | | | | Call: limit_quantity(quantity(25,mile),vrm,V611)\n| | | | | | | | Call: expense.limit(vrm,quantity(V612,mile),max)\n| | | | | | | | | Call: expense.category(vrm,passenger_recovery)\n| | | | | | | | | Fail: expense.category(vrm,passenger_recovery)\n| | | | | | | | Fail: expense.limit(vrm,quantity(V612,mile),max)\n| | | | | | | | Call: evaluate(countofall(V613,expense.limit(vrm,quantity(V614,mile),V615)),0)\n| | | | | | | | Exit: evaluate(countofall(V619,expense.limit(vrm,quantity(V620,mile),V621)),0)\n| | | | | | | | Call: same(V611,quantity(25,mile))\n| | | | | | | | Exit: same(quantity(25,mile),quantity(25,mile))\n| | | | | | | Exit: limit_quantity(Quantity,Expense,LimitedQuantity)\n| | | | | | | Call: limit_quantities([],vrm,V622)\n| | | | | | | Exit: limit_quantities([],Expense,[])\n| | | | | | | Call: same([quantity(25,mile)],V610)\n| | | | | | | Exit: same([quantity(25,mile)],[quantity(25,mile)])\n| | | | | | Exit: limit_quantities(Quantities,Expense,LimitedQuantities)\n| | | | | | Call: multiply_quantities([quantity(25,mile)],quantity(V623,V624))\n| | | | | | Exit: multiply_quantities([quantity(Amount,Unit)],quantity(Amount,Unit))\n| | | | | | Call: expense.unit_price(vrm,quantity(V625,gbp))\n| | | | | | Exit: expense.unit_price(vrm,quantity(5,gbp))\n| | | | | | Call: evaluate(times(25,5),V603)\n| | | | | | Exit: evaluate(times(25,5),125)\n| | | | | Exit: limited_expense_payout(Expense,Policy,quantity(PayoutAmount,gbp))\n| | | | | Call: sum_expenses([pr,ff],my_policy,quantity(V626,gbp))\n| | | | | | Call: limited_expense_payout(pr,my_policy,quantity(V627,gbp))\n| | | | | | | Call: evaluate(countofall(V628,expense.quantity(pr,V628)),0)\n| | | | | | | Fail: evaluate(countofall(V628,expense.quantity(pr,V628)),0)\n| | | | | | | Call: evaluate(setofall(V630,expense.quantity(pr,V630)),V631)\n| | | | | | | Exit: evaluate(setofall(V633,expense.quantity(pr,V633)),[quantity(5,person),quantity(25,mile)])\n| | | | | | | Call: limit_quantities([quantity(5,person),quantity(25,mile)],pr,V634)\n| | | | | | | | Call: limit_quantity(quantity(5,person),pr,V635)\n| | | | | | | | | Call: expense.limit(pr,quantity(V636,person),max)\n| | | | | | | | | | Call: expense.category(pr,passenger_recovery)\n| | | | | | | | | | Exit: expense.category(pr,passenger_recovery)\n| | | | | | | | | Exit: expense.limit(Expense,quantity(LimitAmount,Unit),max)\n| | | | | | | | | Call: evaluate(min(5,7),V637)\n| | | | | | | | | Exit: evaluate(min(5,7),5)\n| | | | | | | | | Call: same(V635,quantity(5,person))\n| | | | | | | | | Exit: same(quantity(5,person),quantity(5,person))\n| | | | | | | | Exit: limit_quantity(Quantity,Expense,LimitedQuantity)\n| | | | | | | | Call: limit_quantities([quantity(25,mile)],pr,V638)\n| | | | | | | | | Call: limit_quantity(quantity(25,mile),pr,V639)\n| | | | | | | | | | Call: expense.limit(pr,quantity(V640,mile),max)\n| | | | | | | | | | | Call: expense.category(pr,passenger_recovery)\n| | | | | | | | | | | Exit: expense.category(pr,passenger_recovery)\n| | | | | | | | | | Exit: expense.limit(Expense,quantity(LimitAmount,Unit),max)\n| | | | | | | | | | Call: evaluate(min(25,20),V641)\n| | | | | | | | | | Exit: evaluate(min(25,20),20)\n| | | | | | | | | | Call: same(V639,quantity(20,mile))\n| | | | | | | | | | Exit: same(quantity(20,mile),quantity(20,mile))\n| | | | | | | | | Exit: limit_quantity(Quantity,Expense,LimitedQuantity)\n| | | | | | | | | Call: limit_quantities([],pr,V642)\n| | | | | | | | | Exit: limit_quantities([],Expense,[])\n| | | | | | | | | Call: same([quantity(20,mile)],V638)\n| | | | | | | | | Exit: same([quantity(20,mile)],[quantity(20,mile)])\n| | | | | | | | Exit: limit_quantities(Tail,Expense,LimitedTail)\n| | | | | | | | Call: same([quantity(5,person),quantity(20,mile)],V634)\n| | | | | | | | Exit: same([quantity(5,person),quantity(20,mile)],[quantity(5,person),quantity(20,mile)])\n| | | | | | | Exit: limit_quantities(Quantities,Expense,LimitedQuantities)\n| | | | | | | Call: multiply_quantities([quantity(5,person),quantity(20,mile)],quantity(V643,V644))\n| | | | | | | | Call: multiply_quantities([quantity(20,mile)],quantity(V645,V646))\n| | | | | | | | Exit: multiply_quantities([quantity(Amount,Unit)],quantity(Amount,Unit))\n| | | | | | | | Call: evaluate(times(5,20),V643)\n| | | | | | | | Exit: evaluate(times(5,20),100)\n| | | | | | | | Call: multiply_units(person,mile,V644)\n| | | | | | | | Exit: multiply_units(Unit1,Unit2,multunit(Unit1,Unit2))\n| | | | | | | Exit: multiply_quantities(LimitedQuantities,quantity(TotalAmount,TotalUnit))\n| | | | | | | Call: expense.unit_price(pr,quantity(V647,gbp))\n| | | | | | | Exit: expense.unit_price(pr,quantity(1,gbp))\n| | | | | | | Call: evaluate(times(100,1),V627)\n| | | | | | | Exit: evaluate(times(100,1),100)\n| | | | | | Exit: limited_expense_payout(Expense,Policy,quantity(PayoutAmount,gbp))\n| | | | | | Call: sum_expenses([ff],my_policy,quantity(V648,gbp))\n| | | | | | | Call: limited_expense_payout(ff,my_policy,quantity(V649,gbp))\n| | | | | | | | Call: evaluate(countofall(V650,expense.quantity(ff,V650)),0)\n| | | | | | | | Exit: evaluate(countofall(V652,expense.quantity(ff,V652)),0)\n| | | | | | | | Call: expense.price(ff,quantity(V649,gbp))\n| | | | | | | | Exit: expense.price(ff,quantity(100,gbp))\n| | | | | | | Exit: limited_expense_payout(Expense,Policy,quantity(PayoutAmount,gbp))\n| | | | | | | Call: sum_expenses([],my_policy,quantity(V653,gbp))\n| | | | | | | Exit: sum_expenses([],Policy,quantity(0,gbp))\n| | | | | | | Call: evaluate(plus(100,0),V648)\n| | | | | | | Exit: evaluate(plus(100,0),100)\n| | | | | | Exit: sum_expenses(Tail,Policy,quantity(TailAmount,gbp))\n| | | | | | Call: evaluate(plus(100,100),V626)\n| | | | | | Exit: evaluate(plus(100,100),200)\n| | | | | Exit: sum_expenses(Tail,Policy,quantity(TailAmount,gbp))\n| | | | | Call: evaluate(plus(125,200),V602)\n| | | | | Exit: evaluate(plus(125,200),325)\n| | | | Exit: sum_expenses(Tail,Policy,quantity(TailAmount,gbp))\n| | | | Call: evaluate(plus(50,325),V597)\n| | | | Exit: evaluate(plus(50,325),375)\n| | | Exit: sum_expenses(Tail,Policy,quantity(TailAmount,gbp))\n| | | Call: evaluate(plus(200,375),V654)\n| | | Exit: evaluate(plus(200,375),575)\n| | Exit: sum_expenses(EligibleExpenses,Policy,quantity(V655,gbp))\n| Exit: expenses_payout(Policy,Breakdown,ExpensesPayout)\n| Call: evaluate(min(quantity(575,gbp),250),V655)\n| Exit: evaluate(min(quantity(575,gbp),250),V656)\nExit: payout(my_policy,my_breakdown,quantity(V656,gbp))</textarea></div></div>"}