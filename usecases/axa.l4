# Compk Language Benchmarking case study
# https://docs.google.com/document/d/1BUP-byDd7K9kaK-ulkRDH3lHawiBDcwGI_1VvuxYFdM/edit#heading=h.u6ulh21yljgi

# Reference to clauses: 
# MW.n: clause n in section Meaning of Words
# SecA.Cov.n ... SecB.Cov.n: what is covered in Section A/B
# SecA.NoCov.n ... SecB.NoCov.n: what is not covered in Section A/B
# SecC.n ... SecD.n: clause n in Section C/D

# -------------------------------------------------------------------
# Class definitions and declarations for a generic car insurance scenario
# -------------------------------------------------------------------

class Person

class Passenger extends Person
class Driver extends Passenger

class GeneralVehicle                   # all possible vehicles
class Vehicle extends GeneralVehicle   # vehicles covered by the insurance, further defined below

decl vehicleAge: GeneralVehicle -> Integer
decl vehicleLength: GeneralVehicle -> Float 


class Event
class BreakdownCause extends Event

class Location     # 0-dimensional space
class Surface      # 2-dimensional space

decl isIn : Location -> Surface -> Boolean


# A breakdown cause provokes a breakdown situation. 
# In a state-based model, breakdown situations could be parallel automata, 
# where a breakdown cause is an event leading into a breakdown situation.
# During a breakdown, several breakdown situations may hold at the same time.
class Situation      # a situation can also be understood as a state in an automaton
class BreakdownSituation extends Situation

# A CoverageService is a concrete service or repair action (e.g. transport, payments) in case of a breakdown.
# For separation of concerns and easier adaptation of concrete values, 
# it is abstracted away into a CoverageType.
class CoverageType
class CoverageService

decl noCoverProvided : CoverageType
decl payBreakdownVehicle : CoverageType
decl recoverPassengersVehicle20MilesLim : CoverageType
decl recoverPassengersVehicleAuthorizedOp : CoverageType


fact <coverageTypeDisj>
noCoverProvided /= payBreakdownVehicle && 
    noCoverProvided /= recoverPassengersVehicle20MilesLim &&
    noCoverProvided /= recoverPassengersVehicleAuthorizedOp &&
payBreakdownVehicle /= recoverPassengersVehicle20MilesLim &&
    payBreakdownVehicle /= recoverPassengersVehicleAuthorizedOp &&
recoverPassengersVehicle20MilesLim /= recoverPassengersVehicleAuthorizedOp

# if Situation corresponds to a state, then currentSit is like the current state
decl currentSit : Situation -> Boolean

decl situationInLocation : Situation -> Location ->  Boolean

# a BreakdownCause causes a BreakdownSituation
# Maybe, this is to fine-grained. Only use BreakdownSituation, completely remove BreakdownCause
# decl causes: BreakdownCause -> BreakdownSituation -> Boolean

# in a BreakdownSituation, a CoverageType is provided
decl coverProvided: Situation -> CoverageType -> RuleApp -> Boolean

### Predicates related to classes

decl isBreakdownSituation: Situation -> Boolean

## uninteresting (the is... predicates should be generated)
decl isGeneralVehicle : GeneralVehicle -> Boolean
decl isVehicle : GeneralVehicle -> Boolean


rule <VehicleClassIncl>
for v: GeneralVehicle
if isVehicle v 
then isGeneralVehicle v


# -------------------------------------------------------------------
# Specific AXA insurance scenario
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Meaning of Words
# -------------------------------------------------------------------

# MW.11
decl uk: Surface
# decl abroad: Surface  # currently not needed

# MW.9
# The contract is implicitly parameterized by the policy holder and their data, such as their home
decl home: Location
decl distance: Location -> Location -> Integer

fact <homeInUK>
isIn home uk

# MW.10
# This is an exhaustive enumeration of BreakdownSituation 
# TODO: still state corresponding axiom
# TODO: The following have been declared as Situation and not BreakdownSituation
# to avoid an L4 -> SMT translation problem.
decl mechanicalBrkd: Situation

# Commented out redundant situations
# decl vandalism: Situation
# decl fire: Situation
# decl theft: Situation
# decl flatTyre: Situation
# decl flatBattery: Situation
# decl accident: Situation

decl noFuel: Situation
decl misFuelling: Situation  # same as "putting the wrong fuel into it"
decl missingKeys: Situation  # for: losing or breaking vehicle keys

# MW.8
# To be understood as necessary and sufficient condition (with rule inversion)
rule <vehicleSpec> 
for v: GeneralVehicle
if vehicleAge v <= 16 && vehicleLength v <= 5.5   # and several other conditions
then isVehicle v 


# -------------------------------------------------------------------
# Section A
# -------------------------------------------------------------------

class RuleApp

decl SecA_PayBreakdownVehicle : RuleApp
decl SecA_RecoverPassengersVehicle20MilesLim : RuleApp
decl SecA_RecoverPassengersVehicleAuthorizedOp : RuleApp
decl SecA_BreakdownLess1Mile : RuleApp
decl SecA_BreakdownNotInUK : RuleApp


decl premiumPaid: Boolean
decl secA_Applicability: Boolean

# SecA.preamble
# TODO (L4 language): provide a context construct
# EXPSYS: rule not translated at all?
rule <SecA_Context>
if premiumPaid
then secA_Applicability

# SecA.Cov.1
# EXPSYS: commented out secA_Applicability
rule <SecA_PayBreakdownVehicle>
for s: Situation, loc: Location
if # secA_Applicability && 
   currentSit s &&
   isBreakdownSituation s && situationInLocation s loc && (distance home loc < 20)
then coverProvided s payBreakdownVehicle SecA_PayBreakdownVehicle


decl notSafeToDrive: Situation -> Boolean

# SecA.Cov.2
# EXPSYS: rule cannot be translated correctly with condition secA_Applicability. No simple booleans admitted?
rule <SecA_RecoverPassengersVehicle20MilesLim>
for s: Situation, loc: Location
if # secA_Applicability && 
   currentSit s &&
   isBreakdownSituation s && notSafeToDrive s 
then coverProvided s recoverPassengersVehicle20MilesLim SecA_RecoverPassengersVehicle20MilesLim

# SecA.Cov.3
# TODO: model "you will have to pay all other costs"
# EXPSYS: something goes wrong in this rule. What? See above
rule <SecA_RecoverPassengersVehicleAuthorizedOp>
for s: Situation
if # secA_Applicability && 
   currentSit s && (s == missingKeys)
then coverProvided s recoverPassengersVehicleAuthorizedOp SecA_RecoverPassengersVehicleAuthorizedOp

# SecA.NoCov.1
rule <SecA_BreakdownLess1Mile>
for s: Situation, loc: Location
if currentSit s && isBreakdownSituation s &&
    situationInLocation s loc && (distance home loc <= 1)
then coverProvided s noCoverProvided SecA_BreakdownLess1Mile

# SecA.NoCov.2
rule <SecA_BreakdownNotInUK>
for s: Situation, loc: Location
if currentSit s && isBreakdownSituation s &&
    situationInLocation s loc && not (isIn loc uk)
then coverProvided s noCoverProvided SecA_BreakdownNotInUK

# Derived rules

# rule <coverdProvidedInversion>
#      {derived: {apply: {inversion,
#      	       	        apply: {normalize, SecA_PayBreakdownVehicle},
#      	       	        apply: {normalize, SecA_RecoverPassengersVehicle20MilesLim},
#      	       	        apply: {normalize, SecA_RecoverPassengersVehicleAuthorizedOp},
#      	       	        apply: {normalize, SecA_BreakdownLess1Mile},
#      	       	        apply: {normalize, SecA_BreakdownNotInUK}
#                             }}}

decl mySit: Situation
decl myCov: CoverageType
decl myra1: RuleApp
decl myra2: RuleApp

assert <contradictoryCover> {SMT: consistent}
coverProvided mySit myCov myra1 && coverProvided mySit noCoverProvided myra2
